### Generic ###

type Token @entity {
  id: ID!
  name: String
  decimals: Int!
  symbol: String
  # Only interested in tokens with a linked zkAsset
  zkAsset: ZkAsset!
}

type ZkAsset @entity {
  id: ID!
  name: String
  scalingFactor: BigInt!
  symbol: String
  # ZkAsset may be purely private
  linkedToken: Token
}

interface TransactionEvent {
  id: ID!
  block: Int!
  event: String!
  from: Bytes!
  stream: Stream!
  timestamp: BigInt!
  to: Bytes
}

### NoteStream ###

# The id is the stream's id
type Cancellation implements TransactionEvent @entity {
  id: ID!
  block: Int!
  event: String!
  from: Bytes!
  stream: Stream!
  timestamp: BigInt!
  to: Bytes
  duration: BigInt!
}

type Withdrawal implements TransactionEvent @entity {
  id: ID!
  block: Int!
  event: String!
  from: Bytes!
  stream: Stream!
  timestamp: BigInt!
  to: Bytes
  duration: BigInt!
}

type Stream @entity {
  id: ID!
  cancellation: Cancellation
  lastWithdrawTime: BigInt!
  # Optional as cancelled streams don't have a note
  noteHash: Bytes
  recipient: Bytes!
  sender: Bytes!
  startTime: BigInt!
  stopTime: BigInt!
  timestamp: BigInt!
  # @derivedFrom makes it possible to map large sets of data to the same stream
  txs: [TransactionEvent!] @derivedFrom(field: "stream")
  withdrawals: [Withdrawal!] @derivedFrom(field: "stream")
  zkAsset: ZkAsset
}
