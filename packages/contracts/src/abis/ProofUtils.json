{
  "contractName": "ProofUtils",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"AZTEC\",\"details\":\"Library of proof utility functions * Copyright 2020 Spilsbury Holdings Ltd  * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \\\"License\\\"); you may not use this file except in compliance with the License. * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details. * You should have received a copy of the GNU Lesser General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.*\",\"methods\":{},\"title\":\"ProofUtils\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aztec/protocol/contracts/libs/ProofUtils.sol\":\"ProofUtils\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aztec/protocol/contracts/libs/ProofUtils.sol\":{\"keccak256\":\"0xd4a54fd4d28ae3ad84b8970c2b88398661d6c379cdabaac5e2d27337acba19ff\",\"urls\":[\"bzz-raw://ce53cd8592b739ee9d50009c3c8f762cbebfdef3f27ccc6397463d3be94cf650\",\"dweb:/ipfs/QmQok9trFyJdM2iDMKC5WtmCGdCETNZhrooaDaR6CLxSqH\"]}},\"version\":1}",
  "bytecode": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158205c490644a4e59608b018530485e4a08ec78d2922ba183cfe2c7d1c23c3af782a64736f6c63430005100032",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158205c490644a4e59608b018530485e4a08ec78d2922ba183cfe2c7d1c23c3af782a64736f6c63430005100032",
  "sourceMap": "734:640:18:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",
  "deployedSourceMap": "734:640:18:-;;;;;;;;",
  "source": "pragma solidity >= 0.5.0 <0.6.0;\n\n/**\n * @title ProofUtils\n * @author AZTEC\n * @dev Library of proof utility functions\n *\n * Copyright 2020 Spilsbury Holdings Ltd \n *\n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n**/\nlibrary ProofUtils {\n\n    /**\n     * @dev We compress three uint8 numbers into only one uint24 to save gas.\n     * Reverts if the category is not one of [1, 2, 3, 4].\n     * @param proof The compressed uint24 number.\n     * @return A tuple (uint8, uint8, uint8) representing the epoch, category and proofId.\n     */\n    function getProofComponents(uint24 proof) internal pure returns (uint8 epoch, uint8 category, uint8 id) {\n        assembly {\n            id := and(proof, 0xff)\n            category := and(div(proof, 0x100), 0xff)\n            epoch := and(div(proof, 0x10000), 0xff)\n        }\n        return (epoch, category, id);\n    }\n}\n",
  "sourcePath": "@aztec/protocol/contracts/libs/ProofUtils.sol",
  "ast": {
    "absolutePath": "@aztec/protocol/contracts/libs/ProofUtils.sol",
    "exportedSymbols": {
      "ProofUtils": [
        3397
      ]
    },
    "id": 3398,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3378,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:18"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "@title ProofUtils\n@author AZTEC\n@dev Library of proof utility functions\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*",
        "fullyImplemented": true,
        "id": 3397,
        "linearizedBaseContracts": [
          3397
        ],
        "name": "ProofUtils",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3395,
              "nodeType": "Block",
              "src": "1158:214:18",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "id": {
                        "declaration": 3387,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1191:2:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 3380,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1201:5:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "epoch": {
                        "declaration": 3383,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1279:5:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "category": {
                        "declaration": 3385,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1226:8:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 3380,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1246:5:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 3380,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1296:5:18",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 3389,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    id := and(proof, 0xff)\n    category := and(div(proof, 0x100), 0xff)\n    epoch := and(div(proof, 0x10000), 0xff)\n}",
                  "src": "1168:160:18"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "id": 3390,
                        "name": "epoch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3383,
                        "src": "1345:5:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3391,
                        "name": "category",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3385,
                        "src": "1352:8:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3392,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3387,
                        "src": "1362:2:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "id": 3393,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1344:21:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint8_$_t_uint8_$_t_uint8_$",
                      "typeString": "tuple(uint8,uint8,uint8)"
                    }
                  },
                  "functionReturnParameters": 3388,
                  "id": 3394,
                  "nodeType": "Return",
                  "src": "1337:28:18"
                }
              ]
            },
            "documentation": "@dev We compress three uint8 numbers into only one uint24 to save gas.\nReverts if the category is not one of [1, 2, 3, 4].\n@param proof The compressed uint24 number.\n@return A tuple (uint8, uint8, uint8) representing the epoch, category and proofId.",
            "id": 3396,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getProofComponents",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3380,
                  "name": "proof",
                  "nodeType": "VariableDeclaration",
                  "scope": 3396,
                  "src": "1082:12:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint24",
                    "typeString": "uint24"
                  },
                  "typeName": {
                    "id": 3379,
                    "name": "uint24",
                    "nodeType": "ElementaryTypeName",
                    "src": "1082:6:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint24",
                      "typeString": "uint24"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1081:14:18"
            },
            "returnParameters": {
              "id": 3388,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3383,
                  "name": "epoch",
                  "nodeType": "VariableDeclaration",
                  "scope": 3396,
                  "src": "1119:11:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3382,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1119:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3385,
                  "name": "category",
                  "nodeType": "VariableDeclaration",
                  "scope": 3396,
                  "src": "1132:14:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3384,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1132:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3387,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 3396,
                  "src": "1148:8:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3386,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1148:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1118:39:18"
            },
            "scope": 3397,
            "src": "1054:318:18",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 3398,
        "src": "734:640:18"
      }
    ],
    "src": "0:1375:18"
  },
  "legacyAST": {
    "absolutePath": "@aztec/protocol/contracts/libs/ProofUtils.sol",
    "exportedSymbols": {
      "ProofUtils": [
        3397
      ]
    },
    "id": 3398,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3378,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:18"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "@title ProofUtils\n@author AZTEC\n@dev Library of proof utility functions\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*",
        "fullyImplemented": true,
        "id": 3397,
        "linearizedBaseContracts": [
          3397
        ],
        "name": "ProofUtils",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3395,
              "nodeType": "Block",
              "src": "1158:214:18",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "id": {
                        "declaration": 3387,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1191:2:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 3380,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1201:5:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "epoch": {
                        "declaration": 3383,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1279:5:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "category": {
                        "declaration": 3385,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1226:8:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 3380,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1246:5:18",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 3380,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1296:5:18",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 3389,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    id := and(proof, 0xff)\n    category := and(div(proof, 0x100), 0xff)\n    epoch := and(div(proof, 0x10000), 0xff)\n}",
                  "src": "1168:160:18"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "id": 3390,
                        "name": "epoch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3383,
                        "src": "1345:5:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3391,
                        "name": "category",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3385,
                        "src": "1352:8:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3392,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3387,
                        "src": "1362:2:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "id": 3393,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1344:21:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint8_$_t_uint8_$_t_uint8_$",
                      "typeString": "tuple(uint8,uint8,uint8)"
                    }
                  },
                  "functionReturnParameters": 3388,
                  "id": 3394,
                  "nodeType": "Return",
                  "src": "1337:28:18"
                }
              ]
            },
            "documentation": "@dev We compress three uint8 numbers into only one uint24 to save gas.\nReverts if the category is not one of [1, 2, 3, 4].\n@param proof The compressed uint24 number.\n@return A tuple (uint8, uint8, uint8) representing the epoch, category and proofId.",
            "id": 3396,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getProofComponents",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3380,
                  "name": "proof",
                  "nodeType": "VariableDeclaration",
                  "scope": 3396,
                  "src": "1082:12:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint24",
                    "typeString": "uint24"
                  },
                  "typeName": {
                    "id": 3379,
                    "name": "uint24",
                    "nodeType": "ElementaryTypeName",
                    "src": "1082:6:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint24",
                      "typeString": "uint24"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1081:14:18"
            },
            "returnParameters": {
              "id": 3388,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3383,
                  "name": "epoch",
                  "nodeType": "VariableDeclaration",
                  "scope": 3396,
                  "src": "1119:11:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3382,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1119:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3385,
                  "name": "category",
                  "nodeType": "VariableDeclaration",
                  "scope": 3396,
                  "src": "1132:14:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3384,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1132:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3387,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 3396,
                  "src": "1148:8:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3386,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1148:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1118:39:18"
            },
            "scope": 3397,
            "src": "1054:318:18",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 3398,
        "src": "734:640:18"
      }
    ],
    "src": "0:1375:18"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-03-16T22:04:58.294Z",
  "devdoc": {
    "author": "AZTEC",
    "details": "Library of proof utility functions * Copyright 2020 Spilsbury Holdings Ltd  * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\"); you may not use this file except in compliance with the License. * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details. * You should have received a copy of the GNU Lesser General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.*",
    "methods": {},
    "title": "ProofUtils"
  },
  "userdoc": {
    "methods": {}
  }
}